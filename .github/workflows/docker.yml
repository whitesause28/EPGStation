name: Docker

on:
  push:
    branches:
      - master
    tags:
      - '*'
  # 現時点では、GitHub ActionsのWeb UIは、過去に実行したジョブの再実行はサポート
  # しているが、指定したタグに対する実行などはサポートしていない。代替手段とし
  # て、GitHub APIを使ったビルドの実行を可能とするよう、以下を設定しておく。
  #
  # 以下のようなスクリプトで、指定したタグのイメージを作成できる。
  # ----------------------------------------------------------------------------
  # REPO='l3tnun/EPGStation'
  # GITHUB_TOKEN='token...'
  # VERSION='1.6.8'
  #
  # JSON=$(cat <<EOF
  # {
  # "event_type": "build-docker-images",
  # "client_payload": {
  #    "ref": "$VERSION",  # ビルド対象のブランチ、タグ、またはコミットハッシュ
  #    "latest": true      # latestタグ系を更新するかどうか
  #  }
  # }
  # EOF
  # )
  #
  # echo "$JSON" | curl https://api.github.com/repos/$REPO/dispatches \
  #   -X POST -d @- \
  #   -H "Authorization: token $GITHUB_TOKEN" \
  #   -H "Content-Type: application/json"
  # ----------------------------------------------------------------------------
  repository_dispatch:
    types:
      - build-docker-images

env:
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  MAIN_PLATFORM: debian

jobs:
  build-images:
    # Fork先リポジトリーでは実行しない。
    #
    # 以下の条件では、`env.*`や`secrets.*`は使えない。
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions
    if: github.repository == 'l3tnun/EPGStation'
    strategy:
      matrix:
        platform:
          - alpine
          - debian
        arch:
          # 公式のnodeイメージはarm32v6以前をサポートしていない
          - amd64
          - arm32v7
          - arm64v8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set VERSION
        run: |-
          echo ::set-env name=VERSION::${GITHUB_REF#refs/*/}
      - name: Checkout a specific src
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.ref }}
        if: github.event_name == 'repository_dispatch'
      - name: Override VERSION
        run: |-
          echo ::set-env name=VERSION::${{ github.event.client_payload.ref }}
        if: github.event_name == 'repository_dispatch'
      - name: Setup QEMU user-mode emulation
        run: |-
          sudo apt-get update
          sudo apt-get install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build image
        # 現時点では、`--squash`などの実験的機能はGitHub Actionsでは動かない
        run: |-
          docker build -t ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} -f Dockerfile.${{ matrix.platform }} --no-cache --build-arg arch=${{ matrix.arch }} .
      - name: Login to DockerHub
        # DOCKERHUB_TOKENが登録されていない場合は、以下は失敗する
        run: |-
          docker login -u "${{ secrets.DOCKERHUB_USER }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
      - name: Push image
        run: |-
          docker push ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }}
      - name: Update latest tags for each platform
        run: |-
          docker tag ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}-${{ matrix.arch }}
          docker push ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}-${{ matrix.arch }}
        if: env.VERSION != 'master'
      - name: Update the main platform tags
        run: |-
          docker tag ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.arch }}
          docker push ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.arch }}
        if: matrix.platform == env.MAIN_PLATFORM
      - name: Update latest tags for the main platform
        run: |-
          docker tag ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}-${{ matrix.arch }} ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.arch }}
          docker push ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.arch }}
        if: env.VERSION != 'master' && matrix.platform == env.MAIN_PLATFORM
  build-multiarch-image:
    strategy:
      matrix:
        platform:
          - alpine
          - debian
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Set VERSION
        run: |-
          echo ::set-env name=VERSION::${GITHUB_REF#refs/*/}
      - name: Override VERSION
        run: |-
          echo ::set-env name=VERSION::${{ github.event.client_payload.ref }}
        if: github.event_name == 'repository_dispatch'
      - name: Login to DockerHub
        run: |-
          docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create and push the manifest for each platform
        run: |-
          docker manifest create ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }} ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-amd64 ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-arm32v7 ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-arm64v8
          docker manifest annotate ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }} ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }} ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-${{ matrix.platform }}
      - name: Update latest tag for each platform
        run: |-
          docker manifest create ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }} ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}-amd64  ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}-arm32v7 ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}-arm64v8
          docker manifest annotate ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }} ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }} ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push ${{ secrets.DOCKERHUB_IMAGE }}:${{ matrix.platform }}
        if: env.VERSION != 'master'
      - name: Update the version tag for the main platform
        run: |-
          docker manifest create ${{ secrets.DOCKERHUB_IMAGE }}:$VERSION ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-amd64 ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-arm32v7 ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-arm64v8
          docker manifest annotate ${{ secrets.DOCKERHUB_IMAGE }}:$VERSION ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate ${{ secrets.DOCKERHUB_IMAGE }}:$VERSION ${{ secrets.DOCKERHUB_IMAGE }}:${VERSION}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push ${{ secrets.DOCKERHUB_IMAGE }}:$VERSION
        if: matrix.platform == env.MAIN_PLATFORM
      - name: Update the latest tag for the main platform
        run: |-
          docker manifest create ${{ secrets.DOCKERHUB_IMAGE }} ${{ secrets.DOCKERHUB_IMAGE }}:amd64 ${{ secrets.DOCKERHUB_IMAGE }}:arm32v7 ${{ secrets.DOCKERHUB_IMAGE }}:arm64v8
          docker manifest annotate ${{ secrets.DOCKERHUB_IMAGE }} ${{ secrets.DOCKERHUB_IMAGE }}:arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate ${{ secrets.DOCKERHUB_IMAGE }} ${{ secrets.DOCKERHUB_IMAGE }}:arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push ${{ secrets.DOCKERHUB_IMAGE }}
        if: env.VERSION != 'master' && matrix.platform == env.MAIN_PLATFORM
